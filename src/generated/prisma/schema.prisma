// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Modelo de Escolas
model Escola {
  id               Int      @id @default(autoincrement())
  nome             String   @db.VarChar(100)
  regiao           String?  @db.VarChar(50)
  grupo            String?  @db.VarChar(50)
  endereco         String?  @db.VarChar(200)
  telefone         String?  @db.VarChar(20)
  email            String?  @db.VarChar(100)
  diretor          String?  @db.VarChar(100)
  dataCriacao      DateTime @default(now()) @map("data_criacao")
  dataAtualizacao  DateTime @default(now()) @updatedAt @map("data_atualizacao")

  // Relacionamentos
  turmas           Turma[]
  alunos           Aluno[]
  usuarios         Usuario[]
  desempenhoHabilidades DesempenhoHabilidade[]

  @@map("escolas")
}

// Modelo de Turmas
model Turma {
  id                   Int      @id @default(autoincrement())
  nome                 String   @db.VarChar(50)
  serie                Int
  turno                String   @db.VarChar(10)
  anoLetivo            String   @db.VarChar(10) @map("ano_letivo")
  escolaId             Int      @map("escola_id")
  professorResponsavel String?  @db.VarChar(100) @map("professor_responsavel")
  sala                 String?  @db.VarChar(20)
  dataCriacao          DateTime @default(now()) @map("data_criacao")
  dataAtualizacao      DateTime @default(now()) @updatedAt @map("data_atualizacao")

  // Relacionamentos
  escola               Escola   @relation(fields: [escolaId], references: [id], onDelete: Restrict)
  alunos               Aluno[]
  aplicacoesProva      AplicacaoProva[]
  desempenhoHabilidades DesempenhoHabilidade[]

  @@index([escolaId], name: "idx_turmas_escola")
  @@index([anoLetivo], name: "idx_turmas_ano_letivo")
  @@map("turmas")
}

// Modelo de Alunos
model Aluno {
  id                  Int      @id @default(autoincrement())
  nome                String   @db.VarChar(100)
  matricula           String   @unique @db.VarChar(20)
  dataNascimento      DateTime? @map("data_nascimento")
  genero              String?  @db.VarChar(1)
  responsavel         String?  @db.VarChar(100)
  telefoneResponsavel String?  @db.VarChar(20) @map("telefone_responsavel")
  emailResponsavel    String?  @db.VarChar(100) @map("email_responsavel")
  turmaId             Int?     @map("turma_id")
  escolaId            Int      @map("escola_id")
  fotoUrl             String?  @db.VarChar(255) @map("foto_url")
  dataCriacao         DateTime @default(now()) @map("data_criacao")
  dataAtualizacao     DateTime @default(now()) @updatedAt @map("data_atualizacao")

  // Relacionamentos
  turma               Turma?   @relation(fields: [turmaId], references: [id], onDelete: SetNull)
  escola              Escola   @relation(fields: [escolaId], references: [id], onDelete: Restrict)
  resultados          Resultado[]

  @@index([turmaId], name: "idx_alunos_turma")
  @@index([escolaId], name: "idx_alunos_escola")
  @@map("alunos")
}

// Modelo de Provas
model Prova {
  id              Int      @id @default(autoincrement())
  nome            String   @db.VarChar(100)
  descricao       String?  @db.Text
  dataAplicacao   DateTime? @map("data_aplicacao")
  tipo            String   @db.VarChar(20)
  disciplina      String?  @db.VarChar(50)
  serie           Int?
  criadoPor       Int?     @map("criado_por")
  dataCriacao     DateTime @default(now()) @map("data_criacao")
  dataAtualizacao DateTime @default(now()) @updatedAt @map("data_atualizacao")

  // Relacionamentos
  questoes        Questao[]
  aplicacoesProva AplicacaoProva[]
  resultados      Resultado[]
  desempenhoHabilidades DesempenhoHabilidade[]

  @@map("provas")
}

// Modelo de Questões
model Questao {
  id              Int      @id @default(autoincrement())
  provaId         Int      @map("prova_id")
  ordem           Int
  enunciado       String   @db.Text
  tipo            String   @db.VarChar(20)
  opcoes          Json?
  respostaCorreta String?  @db.VarChar(255) @map("resposta_correta")
  valor           Decimal  @default(1.0) @db.Decimal(5, 2)
  habilidadeBncc  String?  @db.VarChar(10) @map("habilidade_bncc")
  descricaoBncc   String?  @db.Text @map("descricao_bncc")
  dataCriacao     DateTime @default(now()) @map("data_criacao")
  dataAtualizacao DateTime @default(now()) @updatedAt @map("data_atualizacao")

  // Relacionamentos
  prova           Prova    @relation(fields: [provaId], references: [id], onDelete: Cascade)

  @@index([provaId], name: "idx_questoes_prova")
  @@index([habilidadeBncc], name: "idx_questoes_habilidade")
  @@map("questoes")
}

// Modelo de Aplicações de Prova
model AplicacaoProva {
  id              Int      @id @default(autoincrement())
  provaId         Int      @map("prova_id")
  turmaId         Int      @map("turma_id")
  dataAplicacao   DateTime @map("data_aplicacao")
  horaInicio      DateTime? @db.Time @map("hora_inicio")
  horaTermino     DateTime? @db.Time @map("hora_termino")
  observacoes     String?  @db.Text
  dataCriacao     DateTime @default(now()) @map("data_criacao")

  // Relacionamentos
  prova           Prova    @relation(fields: [provaId], references: [id], onDelete: Cascade)
  turma           Turma    @relation(fields: [turmaId], references: [id], onDelete: Cascade)
  resultados      Resultado[]

  @@map("aplicacoes_prova")
}

// Modelo de Resultados
model Resultado {
  id              Int      @id @default(autoincrement())
  alunoId         Int      @map("aluno_id")
  provaId         Int      @map("prova_id")
  aplicacaoId     Int      @map("aplicacao_id")
  respostas       Json?
  pontuacao       Decimal? @db.Decimal(5, 2)
  percentual      Decimal? @db.Decimal(5, 2)
  dataCorrecao    DateTime? @map("data_correcao")
  corrigidoPor    Int?     @map("corrigido_por")
  observacoes     String?  @db.Text
  dataCriacao     DateTime @default(now()) @map("data_criacao")
  dataAtualizacao DateTime @default(now()) @updatedAt @map("data_atualizacao")

  // Relacionamentos
  aluno           Aluno    @relation(fields: [alunoId], references: [id], onDelete: Cascade)
  prova           Prova    @relation(fields: [provaId], references: [id], onDelete: Cascade)
  aplicacao       AplicacaoProva @relation(fields: [aplicacaoId], references: [id], onDelete: Cascade)

  @@index([alunoId], name: "idx_resultados_aluno")
  @@index([provaId], name: "idx_resultados_prova")
  @@index([aplicacaoId], name: "idx_resultados_aplicacao")
  @@map("resultados")
}

// Modelo de Usuários
model Usuario {
  id              Int      @id @default(autoincrement())
  nome            String   @db.VarChar(100)
  email           String   @unique @db.VarChar(100)
  senha           String   @db.VarChar(255)
  tipo            String   @db.VarChar(20)
  escolaId        Int?     @map("escola_id")
  fotoUrl         String?  @db.VarChar(255) @map("foto_url")
  ultimoAcesso    DateTime? @map("ultimo_acesso")
  ativo           Boolean  @default(true)
  dataCriacao     DateTime @default(now()) @map("data_criacao")
  dataAtualizacao DateTime @default(now()) @updatedAt @map("data_atualizacao")

  // Relacionamentos
  escola          Escola?  @relation(fields: [escolaId], references: [id], onDelete: SetNull)

  @@map("usuarios")
}

// Modelo de Habilidades BNCC
model HabilidadeBncc {
  id              Int      @id @default(autoincrement())
  codigo          String   @unique @db.VarChar(10)
  componente      String   @db.VarChar(50)
  ano             String   @db.VarChar(10)
  descricao       String   @db.Text
  dataCriacao     DateTime @default(now()) @map("data_criacao")

  // Relacionamentos
  desempenhoHabilidades DesempenhoHabilidade[]

  @@map("habilidades_bncc")
}

// Modelo de Desempenho por Habilidades
model DesempenhoHabilidade {
  id               Int      @id @default(autoincrement())
  habilidadeId     Int      @map("habilidade_id")
  escolaId         Int      @map("escola_id")
  turmaId          Int?     @map("turma_id")
  provaId          Int?     @map("prova_id")
  totalQuestoes    Int      @map("total_questoes")
  totalAcertos     Int      @map("total_acertos")
  percentualAcertos Decimal @db.Decimal(5, 2) @map("percentual_acertos")
  dataAvaliacao    DateTime @map("data_avaliacao")
  anoLetivo        String   @db.VarChar(10) @map("ano_letivo")
  dataCriacao      DateTime @default(now()) @map("data_criacao")

  // Relacionamentos
  habilidade       HabilidadeBncc @relation(fields: [habilidadeId], references: [id], onDelete: Cascade)
  escola           Escola   @relation(fields: [escolaId], references: [id], onDelete: Cascade)
  turma            Turma?   @relation(fields: [turmaId], references: [id], onDelete: SetNull)
  prova            Prova?   @relation(fields: [provaId], references: [id], onDelete: SetNull)

  @@index([habilidadeId], name: "idx_desempenho_habilidade")
  @@index([escolaId], name: "idx_desempenho_escola")
  @@index([turmaId], name: "idx_desempenho_turma")
  @@index([provaId], name: "idx_desempenho_prova")
  @@index([anoLetivo], name: "idx_desempenho_ano_letivo")
  @@map("desempenho_habilidades")
}
