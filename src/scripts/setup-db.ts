import { PrismaClient } from '@prisma/client';
import dotenv from 'dotenv';

// Carrega as vari√°veis de ambiente
dotenv.config();

/**
 * Script para verificar a conex√£o com o banco de dados e configurar o ambiente inicial
 */
async function setupDatabase() {
  console.log('üîç Verificando conex√£o com o banco de dados...');

  const prisma = new PrismaClient();

  try {
    // Tenta conectar ao banco de dados
    await prisma.$connect();
    console.log('‚úÖ Conex√£o com o banco de dados estabelecida com sucesso!');
    
    // Verifica se o banco de dados est√° vazio executando uma consulta simples
    const escolaCount = await prisma.escola.count();
    console.log(`‚ÑπÔ∏è N√∫mero de escolas no banco de dados: ${escolaCount}`);
    
    if (escolaCount === 0) {
      console.log('üå± Banco de dados vazio. Execute o comando "npm run prisma:seed" para popular com dados iniciais.');
    }
    
    // Lista as tabelas dispon√≠veis no esquema
    console.log('üìã Tabelas dispon√≠veis no esquema:');
    const dmmf = await prisma._getDmmf();
    dmmf.datamodel.models.forEach((model: { name: string }) => {
      console.log(`   - ${model.name}`);
    });
    
    console.log('‚ú® Banco de dados pronto para uso!');
  } catch (error) {
    console.error('‚ùå Erro ao conectar ao banco de dados:', error);
    console.log('\nüîß Sugest√µes para resolver o problema:');
    console.log('1. Verifique se o cont√™iner MySQL est√° rodando com "docker-compose ps"');
    console.log('2. Certifique-se de que a string de conex√£o no arquivo .env est√° correta');
    console.log('3. Execute as migra√ß√µes com "npm run prisma:migrate"');
    console.log('4. Reinicie o cont√™iner MySQL com "npm run db:down" e "npm run db:up"');
    
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Executa a fun√ß√£o
setupDatabase().catch(console.error); 