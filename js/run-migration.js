/**
 * Script de Migra√ß√£o do Banco de Dados SAG
 * Este script conecta ao MySQL, cria o banco de dados e todas as tabelas
 * definidas em db.js na ordem correta respeitando as depend√™ncias de chaves estrangeiras.
 */

import mysql from 'mysql2/promise';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import {
  criarTabelaEscolas,
  criarTabelaTurmas,
  criarTabelaAlunos,
  criarTabelaProvas,
  criarTabelaQuestoes,
  criarTabelaAplicacoesProva,
  criarTabelaResultados,
  criarTabelaUsuarios,
  criarTabelaHabilidadesBNCC,
  criarTabelaDesempenhoHabilidades,
  criarIndices
} from './db.js';

// Configura√ß√£o do banco de dados
const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: 'sua_senha', // Altere para sua senha do MySQL
  port: 3306
};

const DB_NAME = 'sag_sistema';

/**
 * Conecta ao servidor MySQL sem selecionar um banco de dados
 */
async function conectarAoMySQL() {
  try {
    console.log('üì° Conectando ao servidor MySQL...');
    const connection = await mysql.createConnection({
      host: dbConfig.host,
      user: dbConfig.user,
      password: dbConfig.password,
      port: dbConfig.port
    });
    console.log('‚úÖ Conex√£o com MySQL estabelecida com sucesso!');
    return connection;
  } catch (error) {
    console.error('‚ùå Erro ao conectar ao MySQL:', error.message);
    throw error;
  }
}

/**
 * Cria o banco de dados se n√£o existir
 */
async function criarBancoDeDados(connection) {
  try {
    console.log(`üîß Verificando se o banco de dados '${DB_NAME}' existe...`);
    await connection.query(`CREATE DATABASE IF NOT EXISTS ${DB_NAME}`);
    console.log(`‚úÖ Banco de dados '${DB_NAME}' verificado/criado com sucesso!`);
    
    // Seleciona o banco de dados para uso
    await connection.query(`USE ${DB_NAME}`);
    console.log(`‚úÖ Banco de dados '${DB_NAME}' selecionado para uso.`);
  } catch (error) {
    console.error(`‚ùå Erro ao criar/selecionar o banco de dados '${DB_NAME}':`, error.message);
    throw error;
  }
}

/**
 * Executa a cria√ß√£o das tabelas na ordem correta respeitando as depend√™ncias
 */
async function criarTabelas(connection) {
  // Ordem de cria√ß√£o das tabelas para respeitar as depend√™ncias de chaves estrangeiras
  const scriptsCriacao = [
    { nome: 'Escolas', script: criarTabelaEscolas },
    { nome: 'Turmas', script: criarTabelaTurmas },
    { nome: 'Alunos', script: criarTabelaAlunos },
    { nome: 'Provas', script: criarTabelaProvas },
    { nome: 'Quest√µes', script: criarTabelaQuestoes },
    { nome: 'Aplica√ß√µes de Prova', script: criarTabelaAplicacoesProva },
    { nome: 'Resultados', script: criarTabelaResultados },
    { nome: 'Usu√°rios', script: criarTabelaUsuarios },
    { nome: 'Habilidades BNCC', script: criarTabelaHabilidadesBNCC },
    { nome: 'Desempenho por Habilidades', script: criarTabelaDesempenhoHabilidades }
  ];

  for (const { nome, script } of scriptsCriacao) {
    try {
      console.log(`üìä Criando tabela: ${nome}...`);
      await connection.query(script);
      console.log(`‚úÖ Tabela ${nome} criada com sucesso!`);
    } catch (error) {
      console.error(`‚ùå Erro ao criar tabela ${nome}:`, error.message);
      throw error;
    }
  }
}

/**
 * Cria os √≠ndices para otimiza√ß√£o de consultas
 */
async function criarIndicesTabelas(connection) {
  try {
    console.log('üìà Criando √≠ndices para otimiza√ß√£o de consultas...');
    await connection.query(criarIndices);
    console.log('‚úÖ √çndices criados com sucesso!');
  } catch (error) {
    console.error('‚ö†Ô∏è Erro ao criar √≠ndices:', error.message);
    console.log('‚ö†Ô∏è Continuando a migra√ß√£o mesmo sem todos os √≠ndices...');
    // N√£o interrompemos a migra√ß√£o se os √≠ndices falharem, pois s√£o opcionais
  }
}

/**
 * Executa todo o processo de migra√ß√£o
 */
async function executarMigracao() {
  let connection = null;

  try {
    console.log('üöÄ Iniciando processo de migra√ß√£o do banco de dados...');
    
    // Conectar ao MySQL
    connection = await conectarAoMySQL();
    
    // Criar o banco de dados
    await criarBancoDeDados(connection);
    
    // Criar as tabelas
    await criarTabelas(connection);
    
    // Criar os √≠ndices
    await criarIndicesTabelas(connection);
    
    console.log('üéâ Migra√ß√£o conclu√≠da com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro durante o processo de migra√ß√£o:', error);
    process.exit(1);
  } finally {
    // Fechar a conex√£o
    if (connection) {
      await connection.end();
      console.log('üîå Conex√£o com o banco de dados encerrada.');
    }
  }
}

// Executar a migra√ß√£o
executarMigracao().catch(console.error); 